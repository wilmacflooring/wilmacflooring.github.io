{"version":3,"sources":["screens/Home/Home.js","screens/About/About.js","screens/Contact/Contact.js","components/UI/NotFound.tsx","components/GoogleAnalytics.tsx","components/UI/Header.tsx","components/UI/NavigationBar.tsx","components/UI/Footer.tsx","components/HomepageLayout.tsx","screens/Root.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ScreensHome","props","state","Fragment","Helmet","name","content","Component","ScreensAbout","ScreensContact","NotFound","GoogleAnalytics","this","logPageChange","location","pathname","search","prevLocation","isDifferentPathname","isDifferentSearch","page","window","ReactGA","set","origin","options","pageview","component","initialize","process","REACT_APP_GOOGLE_ANALYTICS","Header","className","cloudName","publicId","secure","crop","quality","fetchFormat","alt","NavigationBar","useState","activeItem","setActive","isOpen","setIsOpen","handleClick","i","Navbar","color","light","expand","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","active","NavLink","tag","Link","to","Footer","Container","Row","Col","Date","getFullYear","HomepageLayout","children","ScreensRoot","GA","path","exact","App","Boolean","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b08b62e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Helmet from 'react-helmet';\r\n\r\n// import ProjectGroup from '../../components/Project/Group';\r\nimport './Home.css';\r\n\r\n/* eslint-disable react/no-multi-comp */\r\n/* Heads up! ScreensHome uses inline styling, however it's not the best practice. Use CSS or styled components for\r\n * such things.\r\n * @TODO: Remove the inline styling everywhere\r\n */\r\nclass ScreensHome extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {/* Defining the Page title, meta, description */}\r\n                <Helmet>\r\n                    <title>Wilmac Flooring - Home</title>\r\n                    <meta name=\"description\" content=\"Contains the featured projects of Wilmac Flooring.\" />\r\n                    {/* TODO: Add subject content for SEO. */}\r\n                    <meta name=\"subject\" content=\"Technology Portfolio\" />\r\n                </Helmet>\r\n                <h1>Coming Soon</h1>\r\n\r\n                {/* <Segment inverted textAlign=\"center\" className=\"Home-segment\" vertical>\r\n                    <Container text>\r\n                        <Header as=\"h1\" content=\"Rustic Santa\" inverted className=\"Home-h1\" />\r\n                        <Header as=\"h2\" content=\"Description to be added.\" inverted className=\"Home-h2\" />\r\n                    </Container>\r\n                </Segment> */}\r\n                {/* Header Page */}\r\n                {/* <Segment textAlign=\"center\" className=\"Home-segment\" vertical>\r\n                    <Container>\r\n                        <Grid columns={1}>\r\n                            <Grid.Row>\r\n                                <Grid.Column>\r\n                                    <Header as=\"h3\" className=\"Home-h3\">\r\n                                        Some Of My Latest Work\r\n                                    </Header>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row>\r\n                                <Grid.Column>Description to be added</Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Container>\r\n                </Segment> */}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScreensHome;\r\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport './About.css';\r\n\r\nconst ScreensAbout = () => {\r\n    return (\r\n        <div>\r\n            <Helmet>\r\n                <title>Wilmac Flooring - About</title>\r\n                <meta name=\"description\" content=\"About Page for Wilmac Flooring.\" />\r\n                <meta name=\"subject\" content=\"About\" />\r\n            </Helmet>\r\n            <div>About page eventually.</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScreensAbout;\r\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport './Contact.css';\r\n\r\nconst ScreensContact = () => (\r\n    <div>\r\n        {/* Defining the Page title, meta, description */}\r\n        <Helmet>\r\n            <title>Wilmac Flooring - Contact</title>\r\n            <meta name=\"description\" content=\"Contact Page for Wilmac Flooring.\" />\r\n            {/* TODO: Add subject to your SEO */}\r\n            <meta name=\"subject\" content=\"Contact\" />\r\n        </Helmet>\r\n        <div>Contact page</div>\r\n        {/* <Container>\r\n            <Grid inverted stackable>\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        <Header inverted as=\"h1\">\r\n                            Contact\r\n                        </Header>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column width={16} className=\"Contact-contactinfo\">\r\n                        <blockquote>\r\n                            <p>\r\n                                Feel free to reach out with any questions or inquiries. Please do not send spam or try\r\n                                to advertise any services to me.\r\n                            </p>\r\n                        </blockquote>\r\n                        <Header inverted as=\"h3\">\r\n                            Email\r\n                        </Header>\r\n                        <p>\r\n                            <a href=\"mailto:rusticsanta@hotmail.com\">rusticsanta@hotmail.com</a>\r\n                        </p>\r\n                        <Header inverted as=\"h3\">\r\n                            LinkedIn\r\n                        </Header>\r\n                        <p>\r\n                            <a href=\"https://www.linkedin.com/in/MattJonesCreation/\">\r\n                                linkedin.com/in/MattJonesCreation\r\n                            </a>\r\n                        </p>\r\n                        <Header inverted as=\"h3\">\r\n                            Github\r\n                        </Header>\r\n                        <p>\r\n                            <a href=\"https://github.com/MattJonesCreation\">github.com/MattJonesCreation</a>\r\n                        </p> \r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Container> */}\r\n    </div>\r\n);\r\n\r\nexport default ScreensContact;\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nconst NotFound: FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            <h2>Page not found</h2>\r\n            <h3>{\"We're sorry, we couldn't find the page you requested\"}</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotFound;\r\n","// utils/GoogleAnalytics.js\r\nimport React, { Component } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Route } from 'react-router-dom';\r\n\r\ninterface ILocation {\r\n    pathname: string;\r\n    search: string;\r\n}\r\n\r\ninterface IGAProps {\r\n    location: ILocation;\r\n    options: Record<string, unknown>;\r\n}\r\n\r\nclass GoogleAnalytics extends Component<IGAProps> {\r\n    componentDidMount(): void {\r\n        this.logPageChange(this.props.location.pathname, this.props.location.search);\r\n    }\r\n\r\n    componentDidUpdate({ location: prevLocation }: IGAProps): void {\r\n        const {\r\n            location: { pathname, search },\r\n        } = this.props;\r\n        const isDifferentPathname = pathname !== prevLocation.pathname;\r\n        const isDifferentSearch = search !== prevLocation.search;\r\n\r\n        if (isDifferentPathname || isDifferentSearch) {\r\n            this.logPageChange(pathname, search);\r\n        }\r\n    }\r\n\r\n    logPageChange(pathname: string, search = ''): void {\r\n        const page = pathname + search;\r\n        const { location } = window;\r\n        ReactGA.set({\r\n            page,\r\n            location: `${location.origin}${page}`,\r\n            ...this.props.options,\r\n        });\r\n        ReactGA.pageview(page);\r\n    }\r\n\r\n    render(): null {\r\n        return null;\r\n    }\r\n}\r\n\r\nconst RouteTracker: () => JSX.Element = () => <Route component={GoogleAnalytics} />;\r\n\r\nconst init: () => boolean = () => {\r\n    const isGAEnabled = process.env.NODE_ENV === 'production';\r\n\r\n    if (isGAEnabled) {\r\n        ReactGA.initialize(process.env.REACT_APP_GOOGLE_ANALYTICS);\r\n    }\r\n\r\n    return isGAEnabled;\r\n};\r\n\r\nexport default {\r\n    GoogleAnalytics,\r\n    RouteTracker,\r\n    init,\r\n};\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Image, Transformation } from 'cloudinary-react';\r\nimport './Header.css';\r\n\r\nconst Header: FunctionComponent = () => {\r\n    return (\r\n        <div className=\"Header\">\r\n            <Image\r\n                cloudName=\"wilmacflooring\"\r\n                publicId=\"cropped-StairsTop_ywk1mh\"\r\n                secure={true}\r\n                crop=\"scale\"\r\n                quality=\"auto\"\r\n                fetchFormat=\"auto\"\r\n                alt=\"Beautiful tile work done by Wilmac Flooring.\"\r\n            >\r\n                <Transformation crop=\"scale\" />\r\n            </Image>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React, { FunctionComponent, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Collapse, Navbar, NavbarToggler, Nav, NavItem, NavLink } from 'reactstrap';\r\nimport './NavigationBar.css';\r\n\r\nconst NavigationBar: FunctionComponent = () => {\r\n    const [activeItem, setActive] = useState(0);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const toggle = () => setIsOpen(!isOpen);\r\n    const handleClick = (i: number) => setActive(i);\r\n\r\n    return (\r\n        <div className=\"NavigationBar\">\r\n            <Navbar color=\"fixed\" light expand=\"md\">\r\n                <NavbarToggler onClick={toggle} />\r\n                <Collapse isOpen={isOpen} navbar>\r\n                    <Nav className=\"mr-auto\" navbar>\r\n                        <NavItem active={activeItem === 0} onClick={() => handleClick(0)}>\r\n                            <NavLink tag={Link} to=\"/\" name=\"home\">\r\n                                Home\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem active={activeItem === 1} onClick={() => handleClick(1)}>\r\n                            <NavLink tag={Link} to=\"/about\" name=\"aboutt\">\r\n                                About Us\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem active={activeItem === 2} onClick={() => handleClick(2)}>\r\n                            <NavLink tag={Link} to=\"/products\" name=\"products\">\r\n                                Our Products\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem active={activeItem === 3} onClick={() => handleClick(3)}>\r\n                            <NavLink tag={Link} to=\"/gallery\" name=\"gallery\">\r\n                                Photo Gallery\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        {/* <NavItem>\r\n                            <NavLink tag={Link} to=\"/contact\" name=\"contact\">\r\n                                Contact Us\r\n                            </NavLink>\r\n                        </NavItem> */}\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport './Footer.css';\r\n\r\nconst Footer: FunctionComponent = () => {\r\n    return (\r\n        <div className=\"Footer\">\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <i>All content is copyright © {new Date().getFullYear()} Wilmac Flooring.</i>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { ReactNode, FunctionComponent } from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport Header from './UI/Header';\r\nimport NavigationBar from './UI/NavigationBar';\r\nimport Footer from './UI/Footer';\r\n\r\ninterface ILayoutProps {\r\n    children: ReactNode;\r\n}\r\n\r\nconst HomepageLayout: FunctionComponent<ILayoutProps> = (props: ILayoutProps) => (\r\n    <div>\r\n        <Header />\r\n        <NavigationBar />\r\n        <Container>\r\n            <Row>\r\n                <Col>{props.children}</Col>\r\n            </Row>\r\n        </Container>\r\n        <Footer />\r\n    </div>\r\n);\r\n\r\nexport default HomepageLayout;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport ScreensHome from './Home/Home';\r\nimport ScreensAbout from './About/About';\r\nimport ScreensContact from './Contact/Contact';\r\n// import ScreensGallery from './Gallery/Gallery';\r\n// import ScreensProducts from './Product/Products';\r\nimport NotFound from 'src/components/UI/NotFound';\r\n\r\nimport GA from 'src/components/GoogleAnalytics';\r\nimport HomepageLayout from 'src/components/HomepageLayout';\r\n\r\nconst ScreensRoot: () => JSX.Element = () => (\r\n    <Router>\r\n        {/* Initialize Google Analytics and managing document title, description, and meta */}\r\n        {GA.init() && <GA.RouteTracker />}\r\n        <HomepageLayout>\r\n            {/* Main Content Routing Pages */}\r\n            <Switch>\r\n                <Route path=\"/\" exact component={ScreensHome} />\r\n                <Route path=\"/about/\" component={ScreensAbout} />\r\n                <Route path=\"/contact/\" component={ScreensContact} />\r\n                <Route component={NotFound} />\r\n                {/* <Route path=\"/products/\" component={ScreensProducts} /> */}\r\n                {/* <Route path=\"/gallery/\" component={ScreensGallery} /> */}\r\n            </Switch>\r\n        </HomepageLayout>\r\n    </Router>\r\n);\r\n\r\nexport default ScreensRoot;\r\n","import React from 'react';\r\nimport ScreensRoot from 'src/screens/Root';\r\nimport './App.css';\r\n\r\nfunction App(): JSX.Element {\r\n    return <ScreensRoot />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-snapshot';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nrender(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}