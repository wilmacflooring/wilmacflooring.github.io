{"version":3,"sources":["screens/Home/Home.js","screens/About/About.js","screens/Contact/Contact.js","components/GoogleAnalytics.tsx","components/UI/Pages.tsx","components/HomepageLayout.tsx","screens/Root.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ScreensHome","props","state","Fragment","Helmet","name","content","Component","ScreensAbout","ScreensContact","GoogleAnalytics","this","logPageChange","location","pathname","search","prevLocation","isDifferentPathname","isDifferentSearch","page","window","ReactGA","set","origin","options","pageview","component","initialize","process","REACT_APP_GOOGLE_ANALYTICS","Example","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","className","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","Pages","React","DesktopContainer","children","MobileContainer","handleSidebarHide","setState","sidebarOpened","handleSidebarShow","ResponsiveContainer","HomepageLayout","ScreensRoot","GA","path","exact","App","Boolean","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71a28973.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Helmet from 'react-helmet';\r\n\r\n// import ProjectGroup from '../../components/Project/Group';\r\nimport './Home.css';\r\n\r\n/* eslint-disable react/no-multi-comp */\r\n/* Heads up! ScreensHome uses inline styling, however it's not the best practice. Use CSS or styled components for\r\n * such things.\r\n * @TODO: Remove the inline styling everywhere\r\n */\r\nclass ScreensHome extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {/* Defining the Page title, meta, description */}\r\n                <Helmet>\r\n                    <title>Wilmac Flooring - Home</title>\r\n                    <meta name=\"description\" content=\"Contains the featured projects of Wilmac Flooring.\" />\r\n                    {/* TODO: Add subject content for SEO. */}\r\n                    <meta name=\"subject\" content=\"Technology Portfolio\" />\r\n                </Helmet>\r\n                {/* <Segment inverted textAlign=\"center\" className=\"Home-segment\" vertical>\r\n                    <Container text>\r\n                        <Header as=\"h1\" content=\"Rustic Santa\" inverted className=\"Home-h1\" />\r\n                        <Header as=\"h2\" content=\"Description to be added.\" inverted className=\"Home-h2\" />\r\n                    </Container>\r\n                </Segment> */}\r\n                {/* Header Page */}\r\n                {/* <Segment textAlign=\"center\" className=\"Home-segment\" vertical>\r\n                    <Container>\r\n                        <Grid columns={1}>\r\n                            <Grid.Row>\r\n                                <Grid.Column>\r\n                                    <Header as=\"h3\" className=\"Home-h3\">\r\n                                        Some Of My Latest Work\r\n                                    </Header>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row>\r\n                                <Grid.Column>Description to be added</Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Container>\r\n                </Segment> */}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScreensHome;\r\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport './About.css';\r\n\r\nconst ScreensAbout = () => {\r\n    return (\r\n        <div>\r\n            <Helmet>\r\n                <title>Wilmac Flooring - About</title>\r\n                <meta name=\"description\" content=\"About Page for Wilmac Flooring.\" />\r\n                <meta name=\"subject\" content=\"About\" />\r\n            </Helmet>\r\n            <div>About page eventually.</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScreensAbout;\r\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport './Contact.css';\r\n\r\nconst ScreensContact = () => (\r\n    <div>\r\n        {/* Defining the Page title, meta, description */}\r\n        <Helmet>\r\n            <title>Wilmac Flooring - Contact</title>\r\n            <meta name=\"description\" content=\"Contact Page for Wilmac Flooring.\" />\r\n            {/* TODO: Add subject to your SEO */}\r\n            <meta name=\"subject\" content=\"Contact\" />\r\n        </Helmet>\r\n        <div>Contact page</div>\r\n        {/* <Container>\r\n            <Grid inverted stackable>\r\n                <Grid.Row>\r\n                    <Grid.Column width={16}>\r\n                        <Header inverted as=\"h1\">\r\n                            Contact\r\n                        </Header>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column width={16} className=\"Contact-contactinfo\">\r\n                        <blockquote>\r\n                            <p>\r\n                                Feel free to reach out with any questions or inquiries. Please do not send spam or try\r\n                                to advertise any services to me.\r\n                            </p>\r\n                        </blockquote>\r\n                        <Header inverted as=\"h3\">\r\n                            Email\r\n                        </Header>\r\n                        <p>\r\n                            <a href=\"mailto:rusticsanta@hotmail.com\">rusticsanta@hotmail.com</a>\r\n                        </p>\r\n                        <Header inverted as=\"h3\">\r\n                            LinkedIn\r\n                        </Header>\r\n                        <p>\r\n                            <a href=\"https://www.linkedin.com/in/MattJonesCreation/\">\r\n                                linkedin.com/in/MattJonesCreation\r\n                            </a>\r\n                        </p>\r\n                        <Header inverted as=\"h3\">\r\n                            Github\r\n                        </Header>\r\n                        <p>\r\n                            <a href=\"https://github.com/MattJonesCreation\">github.com/MattJonesCreation</a>\r\n                        </p> \r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Container> */}\r\n    </div>\r\n);\r\n\r\nexport default ScreensContact;\r\n","// utils/GoogleAnalytics.js\r\nimport React, { Component } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Route } from 'react-router-dom';\r\n\r\ninterface ILocation {\r\n    pathname: string;\r\n    search: string;\r\n}\r\n\r\ninterface IGAProps {\r\n    location: ILocation;\r\n    options: Record<string, unknown>;\r\n}\r\n\r\nclass GoogleAnalytics extends Component<IGAProps> {\r\n    componentDidMount(): void {\r\n        this.logPageChange(this.props.location.pathname, this.props.location.search);\r\n    }\r\n\r\n    componentDidUpdate({ location: prevLocation }: IGAProps): void {\r\n        const {\r\n            location: { pathname, search },\r\n        } = this.props;\r\n        const isDifferentPathname = pathname !== prevLocation.pathname;\r\n        const isDifferentSearch = search !== prevLocation.search;\r\n\r\n        if (isDifferentPathname || isDifferentSearch) {\r\n            this.logPageChange(pathname, search);\r\n        }\r\n    }\r\n\r\n    logPageChange(pathname: string, search = ''): void {\r\n        const page = pathname + search;\r\n        const { location } = window;\r\n        ReactGA.set({\r\n            page,\r\n            location: `${location.origin}${page}`,\r\n            ...this.props.options,\r\n        });\r\n        ReactGA.pageview(page);\r\n    }\r\n\r\n    render(): null {\r\n        return null;\r\n    }\r\n}\r\n\r\nconst RouteTracker: () => JSX.Element = () => <Route component={GoogleAnalytics} />;\r\n\r\nconst init: () => boolean = () => {\r\n    const isGAEnabled = process.env.NODE_ENV === 'production';\r\n\r\n    if (isGAEnabled) {\r\n        ReactGA.initialize(process.env.REACT_APP_GOOGLE_ANALYTICS);\r\n    }\r\n\r\n    return isGAEnabled;\r\n};\r\n\r\nexport default {\r\n    GoogleAnalytics,\r\n    RouteTracker,\r\n    init,\r\n};\r\n","import React, { FunctionComponent, useState } from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    NavbarText,\r\n} from 'reactstrap';\r\n\r\nconst Example: FunctionComponent = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const toggle = () => setIsOpen(!isOpen);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar color=\"light\" light expand=\"md\">\r\n                <NavbarBrand href=\"/\">reactstrap</NavbarBrand>\r\n                <NavbarToggler onClick={toggle} />\r\n                <Collapse isOpen={isOpen} navbar>\r\n                    <Nav className=\"mr-auto\" navbar>\r\n                        <NavItem>\r\n                            <NavLink href=\"/components/\">Components</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledDropdown nav inNavbar>\r\n                            <DropdownToggle nav caret>\r\n                                Options\r\n                            </DropdownToggle>\r\n                            <DropdownMenu right>\r\n                                <DropdownItem>Option 1</DropdownItem>\r\n                                <DropdownItem>Option 2</DropdownItem>\r\n                                <DropdownItem divider />\r\n                                <DropdownItem>Reset</DropdownItem>\r\n                            </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                    </Nav>\r\n                    <NavbarText>Simple Text</NavbarText>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Example;\r\n","import React, { Component, ReactNode, FunctionComponent } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport { NavLink, Link } from 'react-router-dom';\r\n// import logo from 'src/logo.svg';\r\nimport Example from './UI/Pages';\r\n\r\n// Heads up!\r\n// We using React Static to prerender our docs with server side rendering, this is a quite simple solution.\r\n// For more advanced usage please check Responsive docs under the \"Usage\" section.\r\nconst getWidth = () => {\r\n    const isSSR = typeof window === 'undefined';\r\n\r\n    // return isSSR ? (Responsive.onlyTablet.minWidth as number) : window.innerWidth;\r\n    return window.innerWidth;\r\n};\r\n\r\nconst Nav = (props: any) => <NavLink exact {...props} activeClassName=\"active\" />;\r\n\r\ninterface IProps {\r\n    onClick?: (event: React.MouseEvent<HTMLAnchorElement>, data: any) => void;\r\n}\r\n\r\nclass Pages extends React.Component<IProps> {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div>Home eventually.</div>\r\n                {/* <Menu.Item as={Nav} to=\"/\" name=\"home\" position=\"right\" onClick={this.props.onClick}>\r\n                    <Icon name=\"home\" />\r\n                    Home\r\n                </Menu.Item>\r\n                <Menu.Item as={Nav} to=\"/projects\" name=\"projects\" onClick={this.props.onClick}>\r\n                    <Icon name=\"briefcase\" />\r\n                    Projects\r\n                </Menu.Item>\r\n                <Menu.Item as={Nav} to=\"/about\" name=\"about\" onClick={this.props.onClick}>\r\n                    <Icon name=\"info\" />\r\n                    About\r\n                </Menu.Item>\r\n                <Menu.Item as={Nav} to=\"/contact\" name=\"contact\" onClick={this.props.onClick}>\r\n                    <Icon name=\"address book\" />\r\n                    Contact\r\n                </Menu.Item> */}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n// import React from 'react';\r\n// import { Fragment } from 'react';\r\n// import {\r\n//     Collapse,\r\n//     Navbar,\r\n//     NavbarToggler,\r\n//     NavbarBrand,\r\n//     Nav,\r\n//     NavItem,\r\n//     NavLink,\r\n//     UncontrolledDropdown,\r\n//     DropdownToggle,\r\n//     DropdownMenu,\r\n//     DropdownItem,\r\n// } from 'reactstrap';\r\n\r\n// interface IPagesState {\r\n//     isOpen: boolean;\r\n// }\r\n\r\n// class Pages extends React.Component<any, IPagesState> {\r\n//     constructor(props: any) {\r\n//         super(props);\r\n\r\n//         this.state = {\r\n//             isOpen: false,\r\n//         };\r\n//     }\r\n//     toggle = () => {\r\n//         this.setState({\r\n//             isOpen: !this.state.isOpen,\r\n//         });\r\n//     };\r\n\r\n//     render() {\r\n//         return (\r\n//             <Fragment>\r\n//                 <Navbar color=\"light\" light expand=\"md\">\r\n//                     <NavbarBrand href=\"/\">reactstrap</NavbarBrand>\r\n//                     <NavbarToggler onClick={this.toggle} />\r\n//                     <Collapse isOpen={this.state.isOpen} navbar>\r\n//                         <Nav className=\"ml-auto\" navbar>\r\n//                             <NavItem>\r\n//                                 <NavLink href=\"/components/\">Components</NavLink>\r\n//                             </NavItem>\r\n//                             <NavItem>\r\n//                                 <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\r\n//                             </NavItem>\r\n//                             <UncontrolledDropdown nav inNavbar>\r\n//                                 <DropdownToggle nav caret>\r\n//                                     Options\r\n//                                 </DropdownToggle>\r\n//                                 <DropdownMenu right>\r\n//                                     <DropdownItem>Option 1</DropdownItem>\r\n//                                     <DropdownItem>Option 2</DropdownItem>\r\n//                                     <DropdownItem divider />\r\n//                                     <DropdownItem>Reset</DropdownItem>\r\n//                                 </DropdownMenu>\r\n//                             </UncontrolledDropdown>\r\n//                         </Nav>\r\n//                     </Collapse>\r\n//                 </Navbar>\r\n//             </Fragment>\r\n//         );\r\n//     }\r\n// }\r\n\r\ninterface IDesktopProps {\r\n    children: any;\r\n}\r\n\r\n/* Heads up!\r\n * Neither Semantic UI nor Semantic UI React offer a responsive navbar, however, it can be implemented easily.\r\n * It can be more complicated, but you can create really flexible markup.\r\n */\r\nclass DesktopContainer extends Component<IDesktopProps> {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Example />\r\n                {this.props.children}\r\n            </div>\r\n            // <Responsive minWidth={Responsive.onlyTablet.minWidth} getWidth={getWidth}>\r\n            //     <Visibility>\r\n            //         <Segment inverted textAlign=\"center\" style={{ padding: '1em 0em' }} vertical>\r\n            //             <Menu inverted={true} secondary={true} size=\"large\">\r\n            //                 <Container>\r\n            //                     <Menu.Item as={Link} to=\"/\" name=\"home\">\r\n            //                         <img src={logo} alt=\"logo\" />\r\n            //                     </Menu.Item>\r\n            //                     <Pages />\r\n            //                 </Container>\r\n            //             </Menu>\r\n            //         </Segment>\r\n            //     </Visibility>\r\n            //     {this.props.children}\r\n            // </Responsive>\r\n        );\r\n    }\r\n}\r\n\r\ninterface IMobileProps {\r\n    children: ReactNode;\r\n}\r\n\r\ninterface IMobileState {\r\n    sidebarOpened: boolean;\r\n}\r\n\r\nclass MobileContainer extends Component<IMobileProps, IMobileState> {\r\n    constructor(props: IMobileProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sidebarOpened: false,\r\n        };\r\n    }\r\n\r\n    handleSidebarHide = () => this.setState({ sidebarOpened: false });\r\n\r\n    handleSidebarShow = () => this.setState({ sidebarOpened: true });\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        const { sidebarOpened } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Pages onClick={this.handleSidebarHide} />\r\n                {children}\r\n            </div>\r\n            // <Responsive as={Sidebar.Pushable} getWidth={getWidth} maxWidth={Responsive.onlyMobile.maxWidth}>\r\n            //     <Sidebar\r\n            //         as={Menu}\r\n            //         animation=\"overlay\"\r\n            //         direction=\"right\"\r\n            //         inverted\r\n            //         onHide={this.handleSidebarHide}\r\n            //         vertical\r\n            //         visible={sidebarOpened}\r\n            //     >\r\n            //         <Header style={{ padding: '1em 0em .5em 1em' }} inverted={true} as=\"h3\">\r\n            //             Menu\r\n            //             <Icon style={{ float: 'right' }} name=\"close\" link onClick={this.handleSidebarHide} />\r\n            //         </Header>\r\n            //         <Pages onClick={this.handleSidebarHide} />\r\n            //     </Sidebar>\r\n\r\n            //     <Sidebar.Pusher dimmed={sidebarOpened}>\r\n            //         <Segment inverted textAlign=\"center\" style={{ padding: '1em 0em' }} vertical>\r\n            //             <Container>\r\n            //                 <Menu inverted={true} secondary={true} size=\"large\">\r\n            //                     <Menu.Item as={Link} to=\"/\" name=\"home\">\r\n            //                         {/* <img src={logo} alt=\"logo\" /> */}\r\n            //                     </Menu.Item>\r\n            //                     <Menu.Item position=\"right\">\r\n            //                         <Button inverted={true} onClick={this.handleSidebarShow}>\r\n            //                             <Icon name=\"sidebar\" />\r\n            //                             Menu\r\n            //                         </Button>\r\n            //                     </Menu.Item>\r\n            //                 </Menu>\r\n            //             </Container>\r\n            //         </Segment>\r\n            //         {children}\r\n            //     </Sidebar.Pusher>\r\n            // </Responsive>\r\n        );\r\n    }\r\n}\r\n\r\nconst ResponsiveContainer: FunctionComponent = (props) => (\r\n    <div>\r\n        <DesktopContainer>{props.children}</DesktopContainer>\r\n        <MobileContainer>{props.children}</MobileContainer>\r\n    </div>\r\n);\r\n\r\nconst HomepageLayout: FunctionComponent = (props) => (\r\n    <ResponsiveContainer>\r\n        {props.children}\r\n\r\n        {/* Footer */}\r\n        {/* <Segment inverted vertical style={{ padding: '2em 0em 1em 0em' }}>\r\n            <Container>\r\n                <Grid divided inverted stackable>\r\n                    <Grid.Row>\r\n                        <Grid.Column width={13}>\r\n                            <p>\r\n                                <a href=\"https://github.com/wilmacflooring/wilmacflooring.github.io/blob/source/LICENSE\">\r\n                                    All content is copyright © {new Date().getFullYear()} Wilmac Flooring, any\r\n                                    trademarks are property of their respective owners\r\n                                </a>\r\n                            </p>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Container>\r\n        </Segment> */}\r\n    </ResponsiveContainer>\r\n);\r\n\r\nexport default HomepageLayout;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport ScreensHome from './Home/Home';\r\nimport ScreensAbout from './About/About';\r\nimport ScreensContact from './Contact/Contact';\r\n// import ScreensGallery from './Gallery/Gallery';\r\n// import ScreensProducts from './Product/Products';\r\n\r\nimport GA from 'src/components/GoogleAnalytics';\r\nimport HomepageLayout from 'src/components/HomepageLayout';\r\n\r\nconst ScreensRoot: () => JSX.Element = () => (\r\n    <Router>\r\n        {/* Initialize Google Analytics and managing document title, description, and meta */}\r\n        {GA.init() && <GA.RouteTracker />}\r\n        <HomepageLayout>\r\n            {/* Main Content Routing Pages */}\r\n            <Switch>\r\n                <Route path=\"/\" exact component={ScreensHome} />\r\n                <Route path=\"/about/\" component={ScreensAbout} />\r\n                <Route path=\"/contact/\" component={ScreensContact} />\r\n                {/* <Route path=\"/products/\" component={ScreensProducts} /> */}\r\n                {/* <Route path=\"/gallery/\" component={ScreensGallery} /> */}\r\n            </Switch>\r\n        </HomepageLayout>\r\n    </Router>\r\n);\r\n\r\nexport default ScreensRoot;\r\n","import React from 'react';\r\nimport ScreensRoot from 'src/screens/Root';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nfunction App(): JSX.Element {\r\n    return <ScreensRoot />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-snapshot';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nrender(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}